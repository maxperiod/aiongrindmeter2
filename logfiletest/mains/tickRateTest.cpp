#include <Windows.h>

#include "../modules/ExpModule.h"
#include "../modules/ApModule.h"
#include "../modules/KinahModule.h"
#include "../modules/SoulHealerModule.h"
#include "../modules/GpModule.h"

#include "../modules/HuntingModule.h"
#include "../modules/ItemAcquisitionModule.h"

#include "../modules/ProfessionModule.h"

#include "../parser/LogFileUtility.h"

class testtest: public Module{
public:
	bool hasTick;
	testtest(): hasTick (false){
		
		DECLARE_CRITABLE_MESSAGE_RULE(STR_SKILL_SUCC_SkillATK_Instant_ME_TO_B);
		DECLARE_CRITABLE_MESSAGE_RULE(STR_SKILL_SUCC_CarveSignet_ME_TO_B);
		DECLARE_CRITABLE_MESSAGE_RULE(STR_SKILL_SUCC_DispelBuffCounterATK_ME_TO_B);
		DECLARE_MESSAGE_RULE(STR_MSG_COMBAT_MY_CRITICAL);
		DECLARE_MESSAGE_RULE(STR_MSG_COMBAT_MY_ATTACK);
		DECLARE_MESSAGE_RULE(STR_MSG_COMBAT_BLOCK_ME_TO_B);
		DECLARE_MESSAGE_RULE(STR_MSG_COMBAT_PARRY_ME_TO_B);
		DECLARE_MESSAGE_RULE(STR_MSG_COMBAT_DODGED_ME_TO_B);
		DECLARE_MESSAGE_RULE(STR_SKILL_DODGED_ME_TO_B);
		DECLARE_MESSAGE_RULE(STR_SKILL_SUCC_Shield_PROTECT_ME_to_B);
		DECLARE_MESSAGE_RULE(STR_SKILL_SUCC_Reflector_PROTECT_ME_to_B);
		DECLARE_MESSAGE_RULE(STR_MSG_COMBAT_RESISTED_ME_TO_B);
		DECLARE_MESSAGE_RULE(STR_SKILL_RESISTED_ME_TO_B);		
		DECLARE_MESSAGE_RULE(STR_MSG_CHANGE_WEAPON);

				DECLARE_MESSAGE_RULE(STR_GET_EXP_VITAL_MAKEUP_BONUS);
		DECLARE_MESSAGE_RULE(STR_GET_EXP_VITAL_BONUS);
		DECLARE_MESSAGE_RULE(STR_GET_EXP_MAKEUP_BONUS);
		DECLARE_MESSAGE_RULE(STR_GET_EXP);

		DECLARE_MESSAGE_RULE(STR_GET_EXP2_VITAL_MAKEUP_BONUS);
		DECLARE_MESSAGE_RULE(STR_GET_EXP2_VITAL_BONUS);
		DECLARE_MESSAGE_RULE(STR_GET_EXP2_MAKEUP_BONUS);
		DECLARE_MESSAGE_RULE(STR_GET_EXP2);

		DECLARE_MESSAGE_RULE(STR_GET_EXP_PCBANG_VITAL_MAKEUP_BONUS);
		DECLARE_MESSAGE_RULE(STR_GET_EXP_PCBANG_VITAL_BONUS);
		DECLARE_MESSAGE_RULE(STR_GET_EXP2_PCBANG_VITAL_MAKEUP_BONUS);		
		DECLARE_MESSAGE_RULE(STR_GET_EXP2_PCBANG_VITAL_BONUS);

		DECLARE_MESSAGE_RULE(STR_CANNOT_GET_PVP_EXP_TARGET_LIMIT);
		DECLARE_MESSAGE_RULE(STR_CANNOT_GET_PVP_EXP_TIMEBASE_LIMIT);
		DECLARE_MESSAGE_RULE(STR_MSG_ADDEXP_POINT_USE);
		DECLARE_MESSAGE_RULE(STR_MSG_EXP_EXTRACTION_USE);
		DECLARE_MESSAGE_RULE(STR_LEVEL_LIMIT_QUEST_NOT_FINISHED1);
		DECLARE_MESSAGE_RULE(STR_MSG_CANT_NOVICE_SERVER_ALREADY_MAX_LEVEL);

		DECLARE_MESSAGE_RULE(STR_SKILL_LEARNED_NEW_SKILL);

			DECLARE_MESSAGE_RULE(STR_MSG_GLORY_POINT_GAIN);
	DECLARE_MESSAGE_RULE(STR_MSG_GLORY_POINT_LOSE);

		DECLARE_MESSAGE_RULE(STR_GET_EXP_VITAL_MAKEUP_BONUS);
	DECLARE_MESSAGE_RULE(STR_GET_EXP_VITAL_BONUS);
	DECLARE_MESSAGE_RULE(STR_GET_EXP_MAKEUP_BONUS);
	DECLARE_MESSAGE_RULE(STR_GET_EXP);
	DECLARE_MESSAGE_RULE(STR_GET_EXP_PCBANG_VITAL_MAKEUP_BONUS);
	DECLARE_MESSAGE_RULE(STR_GET_EXP_PCBANG_VITAL_BONUS);

	DECLARE_MESSAGE_RULE(STR_MSG_COMBAT_HOSTILE_DEATH_TO_ME);
	DECLARE_MESSAGE_RULE(STR_MSG_COMBAT_HOSTILE_DEATH);
	DECLARE_MESSAGE_RULE(STR_MSG_COMBAT_HOSTILE_DEATH_TO_B);
	DECLARE_MESSAGE_RULE(STR_QUEST_SYSTEMMSG_COMPLETE);

		DECLARE_MESSAGE_RULE(STR_MSG_GET_ITEM_EXTRA_MULTI);
	DECLARE_MESSAGE_RULE(STR_MSG_GET_ITEM_EXTRA);
	DECLARE_MESSAGE_RULE(STR_MSG_GET_ITEM_MULTI);
	DECLARE_MESSAGE_RULE(STR_MSG_GET_ITEM);
	DECLARE_MESSAGE_RULE(STR_USE_ITEM);
	DECLARE_MESSAGE_RULE(STR_UNCOMPRESS_COMPRESSED_ITEM_SUCCEEDED);
	DECLARE_MESSAGE_RULE(STR_MSG_DICE_RESULT_ME);
	DECLARE_MESSAGE_RULE(STR_MSG_GET_ITEM_PARTYNOTICE_DICE);
	DECLARE_MESSAGE_RULE(STR_MSG_GET_ITEM_PARTYNOTICE_DICE_GIVEUP_ROLL);
	DECLARE_MESSAGE_RULE(STR_MSG_GET_ITEM_PARTYNOTICE_DICE_WIN);
	DECLARE_MESSAGE_RULE(STR_MSG_GET_ITEM_PARTYNOTICE_DICE_GIVEUP_ROLL_ALL);
	DECLARE_MESSAGE_RULE(STR_PARTY_ITEM_WIN);

		DECLARE_MESSAGE_RULE(STR_MSG_GETMONEY);
	DECLARE_MESSAGE_RULE(STR_MSG_GET_POLL_REWARD_MONEY);
	DECLARE_MESSAGE_RULE(STR_MSG_REFUND_MONEY_SYSTEM);
	DECLARE_MESSAGE_RULE(STR_MSG_USEMONEY);
	DECLARE_MESSAGE_RULE(STR_PARTY_DISTRIBUTE_GOLD);
	DECLARE_MESSAGE_RULE(STR_MSG_PAY_DISTRIBUTE);
	DECLARE_MESSAGE_RULE(STR_BUY_SELL_USER_SELL_ITEMS);

		DECLARE_MESSAGE_RULE(STR_MSG_GET_ITEM_EXTRA_MULTI);
	DECLARE_CRITABLE_MESSAGE_RULE(STR_SKILL_SUCC_SkillATK_Instant_A_TO_ME);
	DECLARE_CRITABLE_MESSAGE_RULE(STR_SKILL_SUCC_SpellATK_Instant_A_TO_ME);
	DECLARE_CRITABLE_MESSAGE_RULE(STR_SKILL_SUCC_SkillATK_Instant_A_TO_B);
	DECLARE_CRITABLE_MESSAGE_RULE(STR_SKILL_SUCC_SpellATK_Instant_A_TO_B);	
	DECLARE_MESSAGE_RULE(STR_MSG_COMBAT_HOSTILE_DEATH_TO_ME);
	DECLARE_MESSAGE_RULE(STR_MSG_COMBAT_MY_DEATH_TO_B);
	DECLARE_MESSAGE_RULE(STR_MSG_COMBAT_FRIENDLY_DEATH);
	DECLARE_MESSAGE_RULE(STR_MSG_COMBAT_HOSTILE_DEATH);
	DECLARE_MESSAGE_RULE(STR_MSG_COMBAT_HOSTILE_DEATH_TO_B);
	DECLARE_MESSAGE_RULE(STR_MSG_COMBAT_FRIENDLY_DEATH_TO_B);

		DECLARE_MESSAGE_RULE(STR_MSG_GET_ITEM);
	DECLARE_MESSAGE_RULE(STR_GATHER_START_1_BASIC);
	DECLARE_MESSAGE_RULE(STR_EXTRACT_GATHER_START_1_BASIC);
	DECLARE_MESSAGE_RULE(STR_COMBINE_START);
	DECLARE_MESSAGE_RULE(STR_GATHERING_SUCCESS_GETEXP);
	DECLARE_MESSAGE_RULE(STR_EXTRACT_GATHERING_SUCCESS_GETEXP);
	DECLARE_MESSAGE_RULE(STR_CRAFT_SUCCESS_GETEXP);
	DECLARE_MESSAGE_RULE(STR_GATHER_SUCCESS_1_BASIC);
	DECLARE_MESSAGE_RULE(STR_EXTRACT_GATHER_SUCCESS_1_BASIC);
	DECLARE_MESSAGE_RULE(STR_COMBINE_SUCCESS);
	DECLARE_MESSAGE_RULE(STR_GATHER_FAIL_1_BASIC);
	DECLARE_MESSAGE_RULE(STR_EXTRACT_GATHER_FAIL_1_BASIC);
	DECLARE_MESSAGE_RULE(STR_COMBINE_FAIL);
	DECLARE_MESSAGE_RULE(STR_GATHER_CANCEL_1_BASIC);
	DECLARE_MESSAGE_RULE(STR_EXTRACT_GATHER_CANCEL_1_BASIC);
	DECLARE_MESSAGE_RULE(STR_COMBINE_CANCEL);
	DECLARE_MESSAGE_RULE(STR_COMBINE_COMBO_FAIL_MULTI);
	DECLARE_MESSAGE_RULE(STR_COMBINE_COMBO_FAIL);
	DECLARE_MESSAGE_RULE(STR_GATHER_SKILL_POINT_UP);
	DECLARE_MESSAGE_RULE(STR_COMBINE_SKILL_POINT_UP);
	DECLARE_MESSAGE_RULE(STR_CRAFT_INFO_MAXPOINT_UP);

		DECLARE_MESSAGE_RULE(STR_SKILL_SUCC_SkillATK_Instant_A_TO_ME);
	DECLARE_MESSAGE_RULE(STR_SKILL_SUCC_SpellATK_INTERVAL_TO_ME);
	DECLARE_MESSAGE_RULE(STR_SUCCESS_RECOVER_EXPERIENCE);
	DECLARE_MESSAGE_RULE(STR_DONOT_HAVE_RECOVER_EXPERIENCE);
	DECLARE_MESSAGE_RULE(STR_MSG_COMBAT_MY_DEATH);
	DECLARE_MESSAGE_RULE(STR_DEATH_MESSAGE_ME);
	DECLARE_MESSAGE_RULE(STR_MSG_COMBAT_MY_DEATH_TO_B);
	DECLARE_MESSAGE_RULE(STR_MSG_PvPZONE_MY_DEATH_TO_B);
	DECLARE_MESSAGE_RULE(STR_MSG_MOVE_SERVER_COMPLETE);

	}

	void executeChatLogCommand(ChatLogCommand& command){
		cout << command.getMessageRuleCode() << ": ";
		map<string, string>& params = command.getParams();
		for (map<string, string>::iterator iter = params.begin(); iter != params.end(); iter ++){
			cout << iter->first << "(" << iter->second << "), ";
			hasTick = true;
		}
		cout << endl;
	}

	void endOfTickAction(){
		if (hasTick) cout << "=========================================================" << endl;
		hasTick = false;
	}
};

int main(){
	string aionDirectory = "D:/Aion/";
	
	testtest test;
	/*
	ExpModule expApp;
	ApModule apApp;
	KinahModule kinahApp;
	SoulHealerModule soulHealerApp(expApp, apApp, kinahApp);	
	GpModule gpApp;
	*/
	LogFileUtility logFileUtility;
	bool status = logFileUtility.setAionDirectory(aionDirectory);
	if (!status) cout << "UNABLE TO OPEN CHAT.LOG" << endl;
	logFileUtility.registerModule(test);
	/*
	logFileUtility.registerModule(soulHealerModule);
	logFileUtility.registerModule(expModule);
	logFileUtility.registerModule(apModule);
	logFileUtility.registerModule(kinahModule);	
	logFileUtility.registerModule(gpModule);

	logFileUtility.registerModule(huntingModule);
	logFileUtility.registerModule(itemAcquisitionModule);
	
	logFileUtility.registerModule(professionModule);
	*/


	while(true){
		logFileUtility.parseLogFile();
	
		
		Sleep(100);
	}
}